// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: pkg/whatsup.proto

package whatsup

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WhatsUp_Connect_FullMethodName    = "/whatsup.WhatsUp/Connect"
	WhatsUp_Send_FullMethodName       = "/whatsup.WhatsUp/Send"
	WhatsUp_Fetch_FullMethodName      = "/whatsup.WhatsUp/Fetch"
	WhatsUp_List_FullMethodName       = "/whatsup.WhatsUp/List"
	WhatsUp_Disconnect_FullMethodName = "/whatsup.WhatsUp/Disconnect"
)

// WhatsUpClient is the client API for WhatsUp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WhatsUpClient interface {
	// User receives a connection token. This connection token is passed implicitly
	// as metadata in all other calls, and is validated by a server-side interceptor.
	Connect(ctx context.Context, in *Registration, opts ...grpc.CallOption) (*AuthToken, error)
	// User sends a message to another user.
	// TODO: add an RPC message called Send that takes a ChatMessage and expects a Success message
	Send(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*Success, error)
	// User fetches all messages addressed to themselves in batches. Batch size is
	// defined by the server that implements this RPC, clients cannot control it.
	// TODO: add an RPC message called Fetch that takes Empty and returns ChatMessages (note the plural!)
	Fetch(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChatMessages, error)
	// User fetches a list of currently active users.
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserList, error)
	// Sent by the user to inform the server they are leaving. The server can then
	// choose to do something with the backlog of messages left in the user's
	// inbox queue that are still unread - for this lab, we will simply purge them.
	// It also invalidates the authentication token used by the user.
	Disconnect(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Success, error)
}

type whatsUpClient struct {
	cc grpc.ClientConnInterface
}

func NewWhatsUpClient(cc grpc.ClientConnInterface) WhatsUpClient {
	return &whatsUpClient{cc}
}

func (c *whatsUpClient) Connect(ctx context.Context, in *Registration, opts ...grpc.CallOption) (*AuthToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthToken)
	err := c.cc.Invoke(ctx, WhatsUp_Connect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whatsUpClient) Send(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*Success, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Success)
	err := c.cc.Invoke(ctx, WhatsUp_Send_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whatsUpClient) Fetch(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChatMessages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatMessages)
	err := c.cc.Invoke(ctx, WhatsUp_Fetch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whatsUpClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserList)
	err := c.cc.Invoke(ctx, WhatsUp_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whatsUpClient) Disconnect(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Success, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Success)
	err := c.cc.Invoke(ctx, WhatsUp_Disconnect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WhatsUpServer is the server API for WhatsUp service.
// All implementations must embed UnimplementedWhatsUpServer
// for forward compatibility.
type WhatsUpServer interface {
	// User receives a connection token. This connection token is passed implicitly
	// as metadata in all other calls, and is validated by a server-side interceptor.
	Connect(context.Context, *Registration) (*AuthToken, error)
	// User sends a message to another user.
	// TODO: add an RPC message called Send that takes a ChatMessage and expects a Success message
	Send(context.Context, *ChatMessage) (*Success, error)
	// User fetches all messages addressed to themselves in batches. Batch size is
	// defined by the server that implements this RPC, clients cannot control it.
	// TODO: add an RPC message called Fetch that takes Empty and returns ChatMessages (note the plural!)
	Fetch(context.Context, *Empty) (*ChatMessages, error)
	// User fetches a list of currently active users.
	List(context.Context, *Empty) (*UserList, error)
	// Sent by the user to inform the server they are leaving. The server can then
	// choose to do something with the backlog of messages left in the user's
	// inbox queue that are still unread - for this lab, we will simply purge them.
	// It also invalidates the authentication token used by the user.
	Disconnect(context.Context, *Empty) (*Success, error)
	mustEmbedUnimplementedWhatsUpServer()
}

// UnimplementedWhatsUpServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWhatsUpServer struct{}

func (UnimplementedWhatsUpServer) Connect(context.Context, *Registration) (*AuthToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedWhatsUpServer) Send(context.Context, *ChatMessage) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedWhatsUpServer) Fetch(context.Context, *Empty) (*ChatMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedWhatsUpServer) List(context.Context, *Empty) (*UserList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedWhatsUpServer) Disconnect(context.Context, *Empty) (*Success, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedWhatsUpServer) mustEmbedUnimplementedWhatsUpServer() {}
func (UnimplementedWhatsUpServer) testEmbeddedByValue()                 {}

// UnsafeWhatsUpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WhatsUpServer will
// result in compilation errors.
type UnsafeWhatsUpServer interface {
	mustEmbedUnimplementedWhatsUpServer()
}

func RegisterWhatsUpServer(s grpc.ServiceRegistrar, srv WhatsUpServer) {
	// If the following call pancis, it indicates UnimplementedWhatsUpServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WhatsUp_ServiceDesc, srv)
}

func _WhatsUp_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Registration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsUpServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhatsUp_Connect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsUpServer).Connect(ctx, req.(*Registration))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhatsUp_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsUpServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhatsUp_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsUpServer).Send(ctx, req.(*ChatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhatsUp_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsUpServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhatsUp_Fetch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsUpServer).Fetch(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhatsUp_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsUpServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhatsUp_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsUpServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhatsUp_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsUpServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhatsUp_Disconnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsUpServer).Disconnect(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// WhatsUp_ServiceDesc is the grpc.ServiceDesc for WhatsUp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WhatsUp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "whatsup.WhatsUp",
	HandlerType: (*WhatsUpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _WhatsUp_Connect_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _WhatsUp_Send_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _WhatsUp_Fetch_Handler,
		},
		{
			MethodName: "List",
			Handler:    _WhatsUp_List_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _WhatsUp_Disconnect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/whatsup.proto",
}
